---
  - name: Update the packages list (Debian)
    when: ansible_os_family == 'Debian'
    apt:
      update_cache: yes
      cache_valid_time: 3600

  - name: (Debian) Install GCC fortran compliler and extra libraries
    when: ansible_os_family == 'Debian'
    apt: name={{ item }} state=present
    with_items: 
      - gfortran
      - gcc-c++
      - libfreetype6-dev
      - libxft-dev
      - libblas-dev 
      - liblapack-dev 
      - libatlas-base-dev
      - git
      - libxml2-dev
      - libxslt-dev

  - name: Update virtualenv version on RedHat
    pip: name=virtualenv state=latest
    when: ansible_os_family == 'RedHat'

  - name: Add bot group
    group:
      name: "{{ bot_group }}"
      state: present

  - name: Add bot user
    user:
      name: "{{ bot_user }}"
      groups: users,wheel,{{ bot_group }}

  - name: (RedHat) Install GCC fortran compliler and extra libraries
    when: ansible_os_family == 'RedHat'
    yum: name={{ item }} state=latest update_cache=yes
    ignore_errors: True

    with_items: 
      - gcc-gfortran
      - freetype-devel
      - libpng-devel
      - scipy
      - python34-Cython
      - python34-numpy
      - python-matplotlib
      - python-pandas
      - git
      - libxml2-devel
      - libxslt-devel


  - name: Copy supervisord telegram config file
    template:
      src: templates/telegram_botd.conf
      dest: /etc/telegram_botd.conf


  - name: Ensure former installation is removed
    file:
      dest: "{{ project_root_dir }}"
      state: absent

  - name: Ensure project directory is created successfuly
    file:
      dest: "{{ project_root_dir }}"
      state: directory

  - name: Checkout bot's repository
    git:
      repo: "{{ project_repo }}"
      dest: "{{ project_root_dir }}"

  - name: Set permissions for the project folder, to correctly run application with supervisord
    file:
      path: "{{ project_root_dir }}"
      owner: "{{ bot_user }}"
      group: "{{ bot_group }}"
      recurse: yes
      state: directory

  - name: Create python's virtual environment
    command: virtualenv {{ project_virtualenv_folder }} -p python3.4 creates={{ project_virtualenv_folder }}
    become: yes
    become_user: "{{ bot_user }}"

  - name: Make sure directory with python wheels exists
    file:
      path: "{{ project_root_dir }}wheels"
      owner: "{{ bot_user }}"
      group: "{{ bot_group }}"
      state: directory

  - name: Copy requirements files (platform specific)
    copy: 
      src: "{{ ansible_os_family|lower}}_requirements.txt"
      dest: "{{ project_root_dir }}bot/requirements.txt"
      owner: "{{ bot_user }}"
      group: "{{ bot_group }}"
      mode: 0644

  - name: Check if wheel for matplotlib exists
    stat: 
      path: "/home/{{ bot_user }}/downloads/wheels/{{ matplotlib_binary }}"
    register: mtpltlib_file

  - name: Debugging matplotlib state
    debug:
      var: mtpltlib_file

  # TODO: place all wheels in a single folder
  - name: Install bot's dependencies
    pip:
      requirements: "{{ project_root_dir }}bot/requirements.txt" 
      virtualenv: "{{ project_virtualenv_folder }}"
      extra_args: "--no-cache-dir --isolated -vv --disable-pip-version-check -f {{ wheels_dir }}"
    become: yes
    become_user: "{{ bot_user }}"
    notify: restart supervisord

  # - name: Install matplotlib from wheel if it is present
  #   pip:
  #     virtualenv: "{{ project_virtualenv_folder }}"
  #     extra_args: "--no-cache-dir --isolated -vv --disable-pip-version-check"
  #     name: "file:///{{ project_root_dir}}wheels/{{ matplotlib_binary }}"
  #   when: mtpltlib_file.stat.exists is defined and mtpltlib_file.stat.exists == True

  # - name: Install matplotlib if wheel is not present
  #   pip:
  #     virtualenv: "{{ project_virtualenv_folder }}"
  #     extra_args: "--no-cache-dir --isolated -vv --disable-pip-version-check"
  #     name: "matplotlib"
  #   when: mtpltlib_file.stat.exists is defined and mtpltlib_file.stat.exists == False
